variables:
  CALLBACK_URL: "https://codenrock.com/api/gitlab/check"
  CONTEXT: "avito-testirovanie-na-backend-1270/ci-build-6105:yc"
  DOMAIN: "avito2024.codenrock.com"
  KUBE_NAMESPACE: "cnrprod1725725859-team-76875"  # Пример namespace

stages:
  - build
  - deploy

build:
  stage: build
  image: docker:27.0.3-dind
  services:
    - docker:27.0.3-dind
  before_script:
    - mkdir -pv ${HOME}/.docker
    - cp -vf $YCR_DOCKER_CONFIG_JSON ${HOME}/.docker/config.json
    - chmod 0600 ${HOME}/.docker/config.json
    - sleep 20
    - docker info
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  only:
    - main
    - master
  script:
    - docker build . -f ./Dockerfile -t ${CI_REGISTRY_IMAGE}:$CI_COMMIT_SHA
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker push ${CI_REGISTRY_IMAGE}:$CI_COMMIT_SHA
  tags:
    - runner
    - build
    - k8s

deploy:
  environment:
    name: production
    url: https://$KUBE_NAMESPACE.$DOMAIN
  image:
    name: bitnami/kubectl:latest
    entrypoint: [""]
  stage: deploy
  only:
    - main
    - master
  script:
    - export HOST_NAME=$KUBE_NAMESPACE.$DOMAIN
    - echo "URL https://$HOST_NAME"
    - kubectl config get-contexts
    - kubectl config use-context $CONTEXT
    - kubectl create ns $KUBE_NAMESPACE || true
    - kubectl -n default get secret avito2024-tls -o yaml | sed 's/  namespace:.*//g' | sed 's/  uid:.*//g' | sed 's/  resourceVersion:.*//g' | sed 's/  creationTimestamp:.*//g' | kubectl apply --namespace $KUBE_NAMESPACE -f -
    - kubectl -n default get secret regcred -o yaml | sed 's/  namespace:.*//g' | sed 's/  uid:.*//g' | sed 's/  resourceVersion:.*//g' | sed 's/  creationTimestamp:.*//g' | kubectl apply --namespace $KUBE_NAMESPACE -f -
    - |
      cat <<EOF | kubectl -n $KUBE_NAMESPACE apply -f -
      ---
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: avito-app-deployment
        annotations:
          app.gitlab.com/app: $CI_PROJECT_PATH_SLUG
          app.gitlab.com/env: $CI_ENVIRONMENT_SLUG
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: avito-app
        template:
          metadata:
            labels:
              app: avito-app
            annotations:
              app.gitlab.com/app: $CI_PROJECT_PATH_SLUG
              app.gitlab.com/env: $CI_ENVIRONMENT_SLUG
          spec:
            imagePullSecrets:
              - name: regcred
            containers:
              - name: avito-app
                image: ${CI_REGISTRY_IMAGE}:$CI_COMMIT_SHA
                imagePullPolicy: Always
                resources:
                  requests:
                    cpu: "100m"
                    memory: "256Mi"
                envFrom:
                - configMapRef:
                    name: app-config
                - secretRef:
                    name: postgres-secret
                ports:
                  - containerPort: 8080
                    protocol: TCP
      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: avito-app-service
      spec:
        selector:
          app: avito-app
        ports:
          - protocol: TCP
            port: 80
            targetPort: 8080
        type: LoadBalancer
      ---
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: avito-app-ingress
        annotations:
          kubernetes.io/ingress.class: nginx
          nginx.ingress.kubernetes.io/ssl-redirect: "false"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
      spec:
        tls:
        - hosts:
          - $HOST_NAME
          secretName: avito2024-tls
        rules:
        - host: $HOST_NAME
          http:
            paths:
            - path: /
              pathType: ImplementationSpecific
              backend:
                service:
                  name: avito-app-service
                  port:
                    number: 80
      ---
      EOF
  tags:
    - runner
    - build
    - k8s
